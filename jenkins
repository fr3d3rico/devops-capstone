def URL = ''
def OLD_BACKEND = ''
def NEW_BACKEND = ''

pipeline {
    agent any
    
    environment {
        DOCKER_USER = credentials('DOCKER_USER')
        DOCKER_PASSWORD = credentials('DOCKER_PASSWORD')
    }

    stages {
        stage('Git checkout') {
            steps {
                sh(script: """
                rm -r devops-capstone
                git clone https://github.com/fr3d3rico/devops-capstone.git
                cd ./devops-capstone/backend
                """, returnStdout: true)
            }
        }
        stage('Dockerfile hadolint v2.7.0') {
            steps {
                sh(script: """
                cd ./devops-capstone/backend
                hadolint Dockerfile
                """, returnStdout: true)
            }
        }
        stage('Npm Install Dependencies') {
            steps {
                sh(script: """
                cd ./devops-capstone/backend
                npm i
                """, returnStdout: true)
            }
        }
        stage('Npm Scan') {
            steps {
                sh(script: """
                cd ./devops-capstone/backend
                npm audit fix --audit-level=critical --force
                """, returnStdout: true)
            }
        }
        stage('Test application') {
            steps {
                sh(script: """
                cd ./devops-capstone/backend
                npm run test
                """, returnStdout: true)
            }
        }
        stage('Docker build') {
            steps {
                sh 'sudo docker build -t udacity-web-app ./devops-capstone/backend'
            } 
        }
        stage('Docker tag') {
            steps {
                sh(script: """ 
                    sudo docker tag udacity-web-app fr3d3rico/udacity-web-app:latest
                    """, returnStdout: true)
            } 
        }
        stage('Docker Push') {
            steps {
                sh(script: """ 
                    sudo docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
                    sudo docker push fr3d3rico/udacity-web-app:latest
                    """, returnStdout: true)
            } 
        }
        stage('Kubernetes deploy') { 
            //https://serverfault.com/questions/724730/unable-to-use-aws-cli-in-jenkins-due-to-unable-to-locate-credentials-error
            //https://serverfault.com/a/1059988
            //https://askubuntu.com/a/6735
            steps {
                script {
                    //optional
                    sh 'aws eks --region us-east-1 update-kubeconfig --name devops-capstone-eks'
                    
                    OLD_BACKEND = sh(script: "kubectl get deployment -o=jsonpath={.items[*].metadata.name}", returnStdout: true).trim()
                    echo "OLD_BACKEND=$OLD_BACKEND"

                    NEW_BACKEND = sh(script: "echo ${env.BUILD_ID}", returnStdout: true).trim()
                    echo "NEW_BACKEND=$NEW_BACKEND"
                }

                script {
                    SED_REPLACE="s/BUILD_ID/${env.BUILD_ID}/"

                    sh(script: """
                    cd ./devops-capstone
                    sed -i ${SED_REPLACE} deployment.yml
                    """, returnStdout: true)

                    sh(script: """
                    cd ./devops-capstone
                    sed -i ${SED_REPLACE} service.yml
                    """, returnStdout: true)

                    sh(script: """
                    cd ./devops-capstone
                    kubectl apply -f deployment.yml
                    kubectl apply -f service.yml
                    """, returnStdout: true)
                }
            } 
        }
        stage('Wait service getting up(5 minutes)') {
            steps {
                sh 'sleep 5m'
            }
        }
        stage('Kubernetes smoke test') {
            steps {
                script {
                    try {
                        URL = sh(script: """ 
                        kubectl get service --sort-by=.metadata.creationTimestamp -o=jsonpath={.items[2].status.loadBalancer.ingress[0].hostname} | head -1
                        """, returnStdout: true)
                    
                        COMPLETE_URL="http://${URL}:3000"

                        sh(script: """ 
                        if curl -s ${COMPLETE_URL} | grep "Hello World!"
                        then
                        return 0
                        else
                        return 1
                        fi
                        """, returnStdout: true)
                    }
                    catch(Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        sh(script: """ 
                        kubectl delete deployment,service backend-$NEW_BACKEND
                        """, returnStdout: true)

                        throw new Exception("Error - Kubernetes smoke test")
                    }
                }
            }
        }
        stage('Kubernetes replace old application') {
            steps {
                script {
                    try {
                        URL = sh(script: """ 
                        kubectl get service --sort-by=.metadata.creationTimestamp -o=jsonpath={.items[2].status.loadBalancer.ingress[0].hostname} | head -1
                        """, returnStdout: true)

                        SED_REPLACE="s/NEW_BACKEND/${URL}/"

                        sh(script: """ 
                        cd ./devops-capstone
                        sed -i ${SED_REPLACE} apigateway.yml
                        """, returnStdout: true)
                    
                        sh(script: """ 
                        cd ./devops-capstone
                        aws apigatewayv2 reimport-api --body file://apigateway.yml --api-id 595oh68rv7
                        """, returnStdout: true)
                    }
                    catch(Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        sh(script: """ 
                        kubectl delete deployment,service backend-$NEW_BACKEND
                        """, returnStdout: true)

                        throw new Exception("Error - Kubernetes replace old application")
                    }
                }
            } 
        }
        stage('Kubernetes remove old application') {
            steps {
                script {
                    sh(script: """ 
                    kubectl delete deployment,service $OLD_BACKEND
                    """, returnStdout: true)
                }
                
            } 
        }
        stage('Docker remove images') {
            steps {
                sh(script: """ 
                sudo docker image prune
                """, returnStdout: true)
            } 
        }
    }
}
