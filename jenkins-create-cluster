def URL = ''

pipeline {
    agent any

    environment {
        DOCKER_USER = credentials('DOCKER_USER')
        DOCKER_PASSWORD = credentials('DOCKER_PASSWORD')
    }
    
    stages {
        stage('Git checkout') {
            steps {
                script {
                    try {
                        sh 'rm -r devops-capstone'
                    }
                    catch(Exception e) {}
                    sh(script: """
                    git clone https://github.com/fr3d3rico/devops-capstone.git
                    cd ./devops-capstone/cloudformation
                    """, returnStdout: true)
                }
            }
        }
        stage('Create cluster') {
            steps {
                sh(script: """
                cd ./devops-capstone/cloudformation
                aws cloudformation create-stack --stack-name eksNewCluster-Udacity --region us-east-1 --template-body file://eks-cluster.yml --parameters file://eks-cluster-parameters.json
                """, returnStdout: true)
            }
        }
        stage('Wait cluster getting up(20 minutes)') {
            steps {
                sh 'sleep 20m'
            }
        }
        stage('Dockerfile hadolint v2.7.0') {
            steps {
                sh(script: """
                cd ./devops-capstone/backend
                hadolint Dockerfile
                """, returnStdout: true)
            }
        }
        stage('Npm Install Dependencies') {
            steps {
                sh(script: """
                cd ./devops-capstone/backend
                npm i
                """, returnStdout: true)
            }
        }
        stage('Npm Scan') {
            steps {
                sh(script: """
                cd ./devops-capstone/backend
                npm audit fix --audit-level=critical --force
                """, returnStdout: true)
            }
        }
        stage('Test application') {
            steps {
                sh(script: """
                cd ./devops-capstone/backend
                npm run test
                """, returnStdout: true)
            }
        }
        stage('Docker build') {
            steps {
                sh 'sudo docker build -t udacity-web-app ./devops-capstone/backend'
            } 
        }
        stage('Docker tag') {
            steps {
                sh(script: """ 
                    sudo docker tag udacity-web-app fr3d3rico/udacity-web-app:latest
                    """, returnStdout: true)
            } 
        }
        stage('Docker Push') {
            steps {
                sh(script: """ 
                    sudo docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
                    sudo docker push fr3d3rico/udacity-web-app:latest
                    """, returnStdout: true)
            } 
        }
        stage('Kubernetes deploy') { 
            steps {
                script {
                    sh 'aws eks --region us-east-1 update-kubeconfig --name devops-capstone-eks'
                }

                script {
                    SED_REPLACE="s/BUILD_ID/${env.BUILD_ID}/"

                    sh(script: """
                    cd ./devops-capstone
                    sed -i ${SED_REPLACE} deployment.yml
                    """, returnStdout: true)

                    sh(script: """
                    cd ./devops-capstone
                    sed -i ${SED_REPLACE} service.yml
                    """, returnStdout: true)

                    sh(script: """
                    cd ./devops-capstone
                    kubectl apply -f deployment.yml
                    kubectl apply -f service.yml
                    """, returnStdout: true)
                }
            } 
        }
        stage('Wait service getting up(5 minutes)') {
            steps {
                sh 'sleep 5m'
            }
        }
        stage('Kubernetes replace old application') {
            steps {
                script {
                    try {
                        URL = sh(script: """ 
                        kubectl get service --sort-by=.metadata.creationTimestamp -o=jsonpath={.items[1].status.loadBalancer.ingress[0].hostname} | head -1
                        """, returnStdout: true)

                        SED_REPLACE="s/NEW_BACKEND/${URL}/"

                        sh(script: """ 
                        cd ./devops-capstone
                        sed -i ${SED_REPLACE} apigateway.yml
                        """, returnStdout: true)
                    
                        sh(script: """ 
                        cd ./devops-capstone
                        aws apigatewayv2 reimport-api --body file://apigateway.yml --api-id 595oh68rv7
                        """, returnStdout: true)
                    }
                    catch(Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                    }
                }
            } 
        }
        stage('Docker remove images') {
            steps {
                sh(script: """ 
                sudo docker image prune
                """, returnStdout: true)
            } 
        }
    }
}
